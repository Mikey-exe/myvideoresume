@using MyVideoResume.Abstractions.Job
@inherits BaseComponent
<div class="filterComponent">
    <RadzenButton Variant="Variant.Outlined" BadgeStyle="BadgeStyle.Secondary" Text="All" Click=@(args => Search("All")) />
    <RadzenDropDown AllowClear=true TValue="string" Change=@(args => Search($"{args}")) @bind-Value=@FilterSelected Data=@DatePosted Placeholder="Date Posted" TextProperty="Value" ValueProperty="Key"></RadzenDropDown>
    <RadzenDropDown AllowClear=true TValue="string" Change=@(args => Search($"{args}")) @bind-Value=@FilterSelected Data=@Remote Placeholder="Remote" TextProperty="Value" ValueProperty="Key"></RadzenDropDown>
    <RadzenDropDown AllowClear=true TValue="string" Change=@(args => Search($"{args}")) @bind-Value=@FilterSelected Data=@JobTypes Placeholder="Job Type" TextProperty="Value" ValueProperty="Key"></RadzenDropDown>
    <RadzenDropDown AllowClear=true TValue="string" Change=@(args => Search($"{args}")) @bind-Value=@FilterSelected Data=@ExperienceLevels Placeholder="Experience Level" TextProperty="Value" ValueProperty="Key"></RadzenDropDown>
</div>

@code {
    SortedList<string, string> DatePosted = new SortedList<string, string> { //Move to a Filters Option Class
        { "24Hrs","Last 24 Hours" },
        { "3Days","Last 3 Days" },
        { "7Days","Last 7 Days"  },
        { "14Days","Last 14 Days"  }};
    SortedList<string, string> Remote = WorkSetting.Remote.ToSortedList();
    SortedList<string, string> JobTypes = JobType.FullTime.ToSortedList();
    SortedList<string, string> ExperienceLevels = ExperienceLevel.LeadExecutive.ToSortedList();

    [Parameter]
    public string FilterSelected { get; set; }
    [Parameter]
    public string QuerySelected { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    void Search(string item)
    {
        FilterSelected = item;
        NavigationManager.NavigateTo($"/search-results?query={QuerySelected}&filter={FilterSelected}");
    }

    void SearchOption(RadzenSplitButtonItem item)
    {
        if (item != null)
        {
            Search(item.Value);
        }
    }
}