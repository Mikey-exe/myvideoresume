@inherits BaseComponent

<div style="float:right">
    <RadzenSplitButton Icon="add_circle" Click=@(args => OnClick(args)) Text="Create Resume" ButtonStyle="ButtonStyle.Danger">
        <ChildContent>
            <RadzenSplitButtonItem Icon="upload_file" Text="Upload PDF" Value="pdf" />
            <RadzenSplitButtonItem Icon="upload" Text="Upload JSON" Value="json" />
            <RadzenSplitButtonItem Icon="construction" Text="Resume Builder" Value="builder" Visible=@Service.IsResumeBuilderEnabled />
        </ChildContent>
    </RadzenSplitButton>
</div>

@code {
    [Inject] public FeatureFlagClientService Service { get; set; }
    [Parameter] public EventCallback<string> ResumeCreated { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected async Task OnClick(RadzenSplitButtonItem args)
    {
        if (args == null || Security.IsNotAuthenticated() && Service.IsResumeBuilderEnabled)
        {
            NavigateTo(Paths.Resume_CreateNew);
        }
        else
        {
            if (args.Value == "pdf" || args.Value == "json")
            {
                var result = await DialogService.OpenAsync("Upload File to Create Resume", ds =>
    @<RadzenCard Variant="Variant.Outlined">
        <ResumeUploadToJsonComponent Url=@Paths.Resume_API_CreateFromFile UploadCompleted=@UploadCompletedHandler></ResumeUploadToJsonComponent>
    </RadzenCard>

    );

                if (result == true)
                {
                }
            }

            if (args.Value == "builder" && Service.IsResumeBuilderEnabled)
            {
                NavigateTo(Paths.Resume_CreateNew);
            }
        }
    }

    async Task UploadCompletedHandler(string result)
    {
        if (!result.HasValue())
        {
            ShowErrorNotification("Failed Creating Resume", string.Empty);
        }
        else
        {
            DialogService.Close();
            ShowSuccessNotification("Resume Created", string.Empty);
        }

        if (ResumeCreated.HasDelegate)
            await ResumeCreated.InvokeAsync(result);

    }
}
