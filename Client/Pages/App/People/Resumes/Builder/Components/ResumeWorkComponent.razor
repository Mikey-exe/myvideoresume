@using MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat
@using MyVideoResume.Data.Models.Resume
@attribute [Authorize]
@inherits BaseComponent
<RadzenStack style="overflow-y: scroll; height:435px" id="workContainer">
    <RadzenDropZoneContainer TItem="Work" Data="WorkItems"
                             ItemRender="@OnItemRender"
                             ItemSelector="@ItemSelector"
                             CanDrop="@CanDrop"
                             Drop="@OnDrop">
        <ChildContent>
            <RadzenDropZone>
                <ChildContent>
                    <RadzenText Text="Add Work History" TextStyle="TextStyle.Subtitle2" Visible=@(WorkItems.Count == 0) />
                </ChildContent>
            </RadzenDropZone>
        </ChildContent>
        <Template>
            <ResumeWorkItemComponent Item=@context WorkItemDeleteCompleted=@Delete></ResumeWorkItemComponent>
        </Template>
    </RadzenDropZoneContainer>

</RadzenStack>
<RadzenButton Size="ButtonSize.ExtraSmall" Icon="add" ButtonStyle="ButtonStyle.Primary" Text="Add Work" Click="@CreateItem" />

<script>
    function scrollTopWork() {
        var container = document.querySelector("#workContainer");
        container.scrollTo(100,0);
    }
</script>

@code {
    [Parameter] public EventCallback<Work> WorkItemCreateCompleted { get; set; }

    Func<Work, RadzenDropZone<Work>, bool> ItemSelector = (item, zone) => true;
    Func<RadzenDropZoneItemEventArgs<Work>, bool> CanDrop = request => true;

    void Delete(Work item)
    {
        WorkItems.Remove(item);
    }

    void OnItemRender(RadzenDropZoneItemRenderEventArgs<Work> args)
    {
        // // Customize item appearance
        // if (args.Item.Name == "Task2")
        // {
        //     args.Attributes["draggable"] = "false";
        //     args.Attributes["style"] = "cursor:not-allowed";
        //     args.Attributes["class"] = "rz-card rz-variant-flat rz-background-color-primary-lighter rz-color-on-primary-lighter";
        // }
        // else
        // {
        //     args.Attributes["class"] = "rz-card rz-variant-filled rz-background-color-primary-light rz-color-on-primary-light";
        // }

        // Do not render item if deleted
        //args.Visible = args.Item. != Status.Deleted;
    }

    void OnDrop(RadzenDropZoneItemEventArgs<Work> args)
    {
        if (args.FromZone != args.ToZone)
        {
            // update item zone
            //args.Item.Status = (Status)args.ToZone.Value;
        }

        if (args.ToItem != null && args.ToItem != args.Item)
        {
            // reorder items in same zone or place the item at specific index in new zone
            WorkItems.Remove(args.Item);
            var position = WorkItems.IndexOf(args.ToItem);
            args.Item.Order = position;
            WorkItems.Insert(position, args.Item);
        }
    }

    protected override void OnInitialized()
    {
        WorkItems = WorkItems.OrderByDescending(x => x.EndDate).ToList<Work>();
    }

    private async Task CreateItem()
    {
        var workItem = new Work()
            {
                Id = Guid.NewGuid().ToString(),
                Order = 0
            };

        WorkItems.Insert(0, workItem);

        if (WorkItemCreateCompleted.HasDelegate)
            await WorkItemCreateCompleted.InvokeAsync(workItem);

        // StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollTopWork");
    }

    [Parameter] public List<Work> WorkItems { get; set; }

}
